{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["require","App","props","state","light","playing","paused","firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","ref","on","snap","setState","val","a","this","set","className","onChange","toggleLight","checked","onClick","pausePlay","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kUAIAA,EAAQ,I,IAEaC,E,kDACpB,WAAYC,GAAQ,IAAD,8BAClB,cAAMA,IACDC,MAAQ,CACZC,OAAO,EACPC,SAAS,EACTC,QAAQ,GALS,E,qDASnB,WAAqB,IAAD,OAWnBC,gBAVuB,CACtBC,OAAQ,0CACRC,WAAY,mCACZC,YAAa,uDACbC,UAAW,mBACXC,cAAe,+BACfC,kBAAmB,gBACnBC,MAAO,6CACPC,cAAe,iBAGhBR,aAEES,IAAI,SACJC,GAAG,SAAS,SAACC,GACb,EAAKC,SAAS,CAAEf,MAAOc,EAAKE,WAE9Bb,aAEES,IAAI,WACJC,GAAG,SAAS,SAACC,GACb,EAAKC,SAAS,CAAEd,QAASa,EAAKE,WAEhCb,aAEES,IAAI,UACJC,GAAG,SAAS,SAACC,GACb,EAAKC,SAAS,CAAEb,OAAQY,EAAKE,a,gEAIhC,sBAAAC,EAAA,sEACOC,KAAKH,SAAS,CAAEf,OAAQkB,KAAKnB,MAAMC,QAD1C,OAECG,aAAoBS,IAAI,SAASO,IAAID,KAAKnB,MAAMC,OAFjD,gD,oHAKA,sBAAAiB,EAAA,sDACCd,aAAoBS,IAAI,UAAUO,KAAKD,KAAKnB,MAAMG,QADnD,gD,0EAIA,WAAU,IAAD,OACR,OACC,yBAAKkB,UAAU,OACd,4BAAQA,UAAU,cACjB,gCACC,uCAAaF,KAAKnB,MAAMC,MAAQ,KAAO,OACvC,kBAAC,IAAD,CACCqB,SAAU,kBAAM,EAAKC,eACrBC,QAASL,KAAKnB,MAAMC,QAErB,6BACCkB,KAAKnB,MAAME,SACX,4BAAQuB,QAAS,kBAAM,EAAKC,aAAaL,UAAU,UACjDF,KAAKnB,MAAMG,OAAS,OAAS,gB,GAhELwB,IAAMC,WCMnBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.46a832ee.chunk.js","sourcesContent":["import React from \"react\";\nimport Switch from \"react-switch\";\nimport \"./App.css\";\nimport * as firebase from \"firebase/app\";\nrequire(\"firebase/database\");\n\nexport default class App extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tlight: false,\n\t\t\tplaying: false,\n\t\t\tpaused: true,\n\t\t};\n\t}\n\n\tcomponentDidMount() {\n\t\tconst firebaseConfig = {\n\t\t\tapiKey: \"AIzaSyC-mpPq9iYl7l8qm63odw-Jxnm2LTavvKY\",\n\t\t\tauthDomain: \"nightlight-f0b70.firebaseapp.com\",\n\t\t\tdatabaseURL: \"https://nightlight-f0b70-default-rtdb.firebaseio.com\",\n\t\t\tprojectId: \"nightlight-f0b70\",\n\t\t\tstorageBucket: \"nightlight-f0b70.appspot.com\",\n\t\t\tmessagingSenderId: \"1056029575292\",\n\t\t\tappId: \"1:1056029575292:web:c4bdfe375253211e76a1f9\",\n\t\t\tmeasurementId: \"G-DJJQ62GH11\",\n\t\t};\n\t\tfirebase.initializeApp(firebaseConfig);\n\t\tfirebase\n\t\t\t.database()\n\t\t\t.ref(\"light\")\n\t\t\t.on(\"value\", (snap) => {\n\t\t\t\tthis.setState({ light: snap.val() });\n\t\t\t});\n\t\tfirebase\n\t\t\t.database()\n\t\t\t.ref(\"playing\")\n\t\t\t.on(\"value\", (snap) => {\n\t\t\t\tthis.setState({ playing: snap.val() });\n\t\t\t});\n\t\tfirebase\n\t\t\t.database()\n\t\t\t.ref(\"paused\")\n\t\t\t.on(\"value\", (snap) => {\n\t\t\t\tthis.setState({ paused: snap.val() });\n\t\t\t});\n\t}\n\n\tasync toggleLight() {\n\t\tawait this.setState({ light: !this.state.light });\n\t\tfirebase.database().ref(\"light\").set(this.state.light);\n\t}\n\n\tasync pausePlay() {\n\t\tfirebase.database().ref(\"paused\").set(!this.state.paused);\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<header className=\"App-header\">\n\t\t\t\t\t<center>\n\t\t\t\t\t\t<p>Light is {this.state.light ? \"ON\" : \"OFF\"}</p>\n\t\t\t\t\t\t<Switch\n\t\t\t\t\t\t\tonChange={() => this.toggleLight()}\n\t\t\t\t\t\t\tchecked={this.state.light}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<br />\n\t\t\t\t\t\t{this.state.playing && (\n\t\t\t\t\t\t\t<button onClick={() => this.pausePlay()} className=\"button\">\n\t\t\t\t\t\t\t\t{this.state.paused ? \"Play\" : \"Pause\"}\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</center>\n\t\t\t\t</header>\n\t\t\t</div>\n\t\t);\n\t}\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}